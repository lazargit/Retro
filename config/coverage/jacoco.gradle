/*
 * Copyright 2017 Vandolf Estrellado
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generate code coverage reports.
 *
 * Reference: https://docs.gradle.org/current/userguide/jacoco_plugin.html
 */

apply plugin: 'jacoco'

apply from: "$rootDir/config/building/utils.gradle"

jacoco {
    toolVersion = "0.7.6.201602180812"
}

// Remove existing plugin task definitions for Java only modules
removeCheckTaskIf("jacoco", JacocoReport)

task jacocoTestReport(type: JacocoReport) {
    group = "Code Coverage"
    description = "Generate Jacoco test reports for all build variants."

    // required to avoid null pointer in this tasks' constructor
    executionData = files()
}

def generateJacocoTask(String flavor, String buildType, String buildVariant, Collection<String> excludeClassDirs) {
    def jacocoTestReportDependency = buildType.isEmpty() ? "test" : "test${buildVariant.capitalize()}UnitTest"
    def jacocoVariant = "jacoco${buildVariant.capitalize()}TestReport"

    task(jacocoVariant, type: JacocoReport, dependsOn: "${jacocoTestReportDependency}") {
        group = "Code Coverage"
        description = "Generate Jacoco test reports for the ${buildVariant} build variant."

        def coverageSourceDirs = resolveSourceDirs(flavor, buildType, buildVariant)
        def classesDir = resolveClassesDir(flavor, buildType, buildVariant)

        classDirectories = fileTree(
                dir: classesDir,
                excludes: excludeClassDirs
        )
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files("${buildDir}/jacoco/${jacocoTestReportDependency}.exec")

        reports {
            csv.enabled = false
            xml.enabled = false
            html.enabled = true
            html {
                destination "${buildDir}/reports/jacoco/${buildVariant}/${jacocoVariant}.html"
            }
        }
    }

    tasks.jacocoTestReport.dependsOn jacocoVariant
}

def generateJacocoTaskForVariant(variant, excludeClassDirs) {
    def flavor = variant.flavorName
    def buildType = variant.buildType.name
    def buildVariant = flavor + (flavor.isEmpty() ? buildType : buildType.capitalize())
    generateJacocoTask(flavor, buildType, buildVariant, excludeClassDirs)
}

ext {
    generateJacocoTask = this.&generateJacocoTask
    generateJacocoTaskForVariant = this.&generateJacocoTaskForVariant
}