apply plugin: 'com.android.library'
apply plugin: 'realm-android'

buildscript {
    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.13"
        classpath "io.realm:realm-gradle-plugin:5.4.1"

    }
}




android {
    compileSdkVersion 26


    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    //buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {

        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode 1
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner globalConfiguration.getAt("testApplicationId")

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8


    }
}

dependencies {

    def libraries = rootProject.ext.presentationDependencies
    implementation project(':domain')
    //DAGGER
    compile                    libraries.dagger.core
    annotationProcessor        libraries.dagger.compiler
    annotationProcessor        libraries.dagger.android.processor
    compile                    libraries.dagger.android.core
    //RX
    compile                    libraries.rx.rxJava
    compile                    libraries.rx.rxAndroid
    //AUTO-VALUE
    compileOnly                libraries.autoValue.autoValueAnnotations
    compileOnly                libraries.autoValue.autoValueGson
    annotationProcessor        libraries.autoValue.autoValue
    annotationProcessor        libraries.autoValue.autoValueParcel
    annotationProcessor        libraries.autoValue.autoValueGson
    //RETROFIT
    compile libraries.retrofit.retrofit
    compile libraries.retrofit.converterGson
    compile libraries.retrofit.converterMoshi
    compile libraries.retrofit.adapterRxjava
    //OK-HTTP
    compile libraries.okhttp.okhttp
    compile libraries.okhttp.logInterceptor

    //DEV
    compile libraries.dev.timber


     //Firebase Authentication
    implementation 'com.google.firebase:firebase-core:16.0.3'
    implementation 'com.google.firebase:firebase-auth:16.0.3'
    // Google Sign In SDK (only required for Google Sign In)
    implementation 'com.google.android.gms:play-services-auth:16.0.0'


    //TEST
    implementation project(':domain')

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation  libraries.test.junit
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    testImplementation libraries.test.mockito
    testImplementation libraries.test.mockwebserver

    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.assertj:assertj-core:1.7.1'
//    testCompile "com.squareup.okhttp3:mockwebserver:$rootProject.mockWebServerVersion"
//    provided "javax.annotation:jsr250-api:$rootProject.jsr250Version"
//    annotationProcessor "android.arch.lifecycle:compiler:$rootProject.archLifecycleCompilerVersion"
//    compile "android.arch.lifecycle:runtime:$rootProject.archLifecycleVersion"
//    compile "android.arch.lifecycle:extensions:$rootProject.archLifecycleExtensionsVersion"
//    testCompile "org.mockito:mockito-core:$rootProject.mockitoVersion"
//    testCompile "junit:junit:$rootProject.junitVersion"


}
apply plugin: 'com.google.gms.google-services'